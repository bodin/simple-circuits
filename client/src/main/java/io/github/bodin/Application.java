/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package io.github.bodin;

import io.github.bodin.annotation.Circuit;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Lazy;
import org.springframework.scheduling.annotation.EnableScheduling;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.servlet.function.RouterFunction;
import org.springframework.web.servlet.function.RouterFunctions;
import org.springframework.web.servlet.function.ServerResponse;

import java.util.*;
import java.util.concurrent.TimeUnit;

import static org.springframework.web.servlet.function.ServerResponse.ok;

@SpringBootApplication
@EnableScheduling
public class Application {
    private static final Logger log = LoggerFactory.getLogger(Application.class);;
    public static void main(String[] args) {
        SpringApplication.run(Application.class, args);
    }

    @Bean
    public DynamicCircuitService circuitService(){
        return new DynamicCircuitService();
    }

    @Autowired @Lazy
    DynamicCircuitService circuitService;

    @Scheduled(fixedRate = 10, timeUnit = TimeUnit.SECONDS)
    public void getProperties(){
        RestTemplate rest = new RestTemplate();
        List<String> circuits =
                rest.getForEntity("http://localhost:8181/circuits", List.class)
                .getBody();
        log.info("Updating State: {}", circuits);
        circuitService.reset(circuits);
    }

    @Configuration
    public static class Circuits {
        @Circuit("test-circuit")
        interface TestCircuit extends io.github.bodin.Circuit {}
    }


    @Autowired @Lazy
    Circuits.TestCircuit TestCircuit;


    @Bean
    public RouterFunction<ServerResponse> endpoints() {
        final Set<String> openCircuits = Collections.synchronizedSet(new HashSet<>());
        return RouterFunctions.route()
                .GET("/hello", req ->
                        ok().body(TestCircuit.isOpen() ? "TestCircuit: open" : "TestCircuit: closed")
                )
            .build();
    }
}